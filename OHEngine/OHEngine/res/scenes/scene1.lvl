

ENTITY_START

BOX_COLLIDER 
MIN_BOUND = 0.2 0.5 0.8
MAX_BOUND = 0.9 1 1.5
ENABLED = 1

CAMERA

DIRECTIONAL_LIGHT
COLOR = 1 1 1
DIRECTION = 1 1 1
AMBIENT = 0.5
DIFFUSE = 0.5
SPECULAR = 0.9
ENABLED = 1

POINT_LIGHT
COLOR = 1 1 1
POSITION = 1 1 1
AMBIENT = 0.5
DIFFUSE = 0.5
SPECULAR = 0.9
CONSTANT = 0.9
LINEAR = 0.9
QUADRATIC = 0.9
ENABLED = 1

SPOT_LIGHT
COLOR = 1 1 1
POSITION = 1 1 1
DIRECTION = 1 1 1
AMBIENT = 0.5
DIFFUSE = 0.5
SPECULAR = 0.9
CONSTANT = 0.9
LINEAR = 0.9
QUADRATIC = 0.9
INNER_CUTOFF_ANGLE = 30
OUTER_CUTOFF_ANGLE = 45
ENABLED = 1

LIGHT_SHADOW
FRUSTUM_SIZE = 10
NEAR_PLANE = 1
FAR_PLANE = 50
ENABLED = 1

MESH_RENDERER
MODEL_PATH = res/objects/vending_machine_sg/SGVM.obj
BORDER_COLOR = 0 0 0
BORDER_ENABLED = 0
IS_TRANSPARENT = 0
IS_SOLID = 1
ENABLED = 1

RIGID_BODY
VELOCITY = 0 0 0 
ACCELERATION = 0 0 0 
WEIGHT = 10
ENABLED = 1

TRANSFORM
POSITION = 0 0 0
SCALE = 1 1 1
ROTATION_AXIS = 0 1 0
ROTATION_ANGLE = 0
FORWARD = 0 0 1
ENABLED = 1


ENTITY_END

BOX_COLLIDER 
MIN_BOUND =  0 -2.8 -3.9
MAX_BOUND = 1.6 6.5 2.7
ENABLED = 0

#version 400 core
layout (points) in;
layout (line_strip, max_vertices  = 7) out;

in VS_OUT
{
	vec4 v_LowerBound;
	vec4 v_UpperBound;
} gs_in[];


uniform mat4 projection;
void main()
{
	vec4 v1 = gs_in[0].v_UpperBound - gs_in[0].v_LowerBound;
	vec4 v2 = gs_in[0].v_UpperBound;
	vec4 vec = vec4(v1.xyzw);
	gl_Position = projection * (vec);
	EmitVertex();
	vec = vec4(v2.xyzw);
	gl_Position = projection * (vec);
	EmitVertex();
	vec = vec4(v2.x,v1.y,v2.z,v2.w);
	gl_Position = projection * (vec);
	EmitVertex();	
	vec.zw = v1.zw;
	gl_Position = projection * (vec);
	EmitVertex();
	vec = vec4(v1.x, v2.yzw);
	gl_Position = projection * (vec);
	EmitVertex();
	vec.zw = v1.zw;
	gl_Position = projection * (vec);
	EmitVertex();
	vec = v1;
	gl_Position = projection * (vec);
	EmitVertex();
	EndPrimitive();	
}

#version 400 core
layout (location = 0) in vec3 aLowerBound;
layout (location = 1) in vec3 aUpperBound;

out VS_OUT
{
	vec4 v_Vertex[16];
} vs_out;

uniform mat4 view;

void main()
{
	vec3 v1 = aLowerBound;
	vec3 v2 = aUpperBound;
    vs_out.v_Vertex[0] = view * vec4(v1.xyz, 1.0f);
    vs_out.v_Vertex[1] = view * vec4(v2.x, v1.yz, 1.0f);
	vs_out.v_Vertex[2] = view * vec4(v2.x, v1.y, v2.z, 1.0f);
	vs_out.v_Vertex[3] = view * vec4(v1.xy, v2.z, 1.0f);
	vs_out.v_Vertex[4] = view * vec4(v1.xyz, 1.0f);
	vs_out.v_Vertex[5] = view * vec4(v1.x, v2.y, v1.z, 1.0f);
	vs_out.v_Vertex[6] = view * vec4(v1.x, v2.yz, 1.0f);
	vs_out.v_Vertex[7] = view * vec4(v2.xyz, 1.0f);
	vs_out.v_Vertex[8] = view * vec4(v2.xy, v1.z, 1.0f);
	vs_out.v_Vertex[9] = view * vec4(v1.x, v2.y, v1.z, 1.0f);
	vs_out.v_Vertex[10] = view * vec4(v2.xy, v1.z, 1.0f);
	vs_out.v_Vertex[11] = view * vec4(v2.x, v1.yz, 1.0f);
	vs_out.v_Vertex[12] = view * vec4(v2.x, v1.y, v2.z, 1.0f);
	vs_out.v_Vertex[13] = view * vec4(v2.xyz, 1.0f);
	vs_out.v_Vertex[14] = view * vec4(v1.x, v2.yz, 1.0f);
	vs_out.v_Vertex[15] = view * vec4(v1.xy, v2.z, 1.0f);
	gl_Position = vec4(0,0,0,0);
}

#version 400 core
layout (points) in;
layout (line_strip, max_vertices  = 16) out;

in VS_OUT
{
	vec4 v_Vertex[7];
} gs_in[];


uniform mat4 projection;
void main()
{
	for(int i = 0; i < 16; i++)
	{
		gl_Position = projection * gs_in[0].v_Vertex[i];
		EmitVertex();
	}
	EndPrimitive();
	
}